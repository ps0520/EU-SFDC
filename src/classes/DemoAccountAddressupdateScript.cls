public class DemoAccountAddressupdateScript {
    
    //DemoAccountAddressupdateScript.updateAccountAddress();
   
    
    public static void updateAccountAddress(){
        //'1581212',463534,468794
        
        set<string> Definedlist = new set<string>();
        String strAccountnum = '1298231,1233844,1810330,1713450,881186,483975,1696888,858976,1581212,1858709,825800,463534,1602846,468794,1419440,1682848,1283356,485351,1653196,486887,1839544,1694285,1027565,1633435,1640694,894412,1695416,538254,536025,1670315,1823205,1412274,1639969,529758,1669232,1163101,1657270,649835,1365234,1667696,1687112,1811575,544200,1625764,1678817,1282265,546098,1653201,1039066,1683385,1657843,999351,1673640,1854257,882461,619322,1626962,1684925,1326214,1568193,1696418,979391,1672986,784154,1356547,1860334,791267,821377,830961,1695375,1680006,1695343,1255360,1036247,831036,895421,1226407,1684558,1671321,831223,1676937,1138096,831421,1674337,1249499,1664096,1877497,841044,1777428,842279,1695382,870873,1729089,1038672,1653703,891752,1685815,1573013,1664669,872872,1548778,1751034,1241761,1686140,1238309,1708984,1631178,1843692,888421,1799693,1670188,1316494,1759247,901049,1695328,909723,913322,1648146,922345,1017572,1695388,1848059,1672611,1735698,1099164,1671939,1120030,1629474,1630982,1134727,1698380,1162958,1559583,1696945,1221646,1602659,1335521,1608420,1252740,1628898,1272766,1278142,1683597,1761332,1304559,1305846,1846832,1572515,1864216,1345367,1351218,1694147,1357981,1691403,1746068,1624450,1842085,1210108,1746149,1698448,1696403,1359631,1367799,1368191,1638306,1368592,1407218,1695265,1697966,1626845,1728954,1407237,1407259,1671282,1407654,1817993,1412042,1680625,1413463,1694624,1416089,1696704,1417115,1635617,1660517,1696861,1417634,1780954,1420557,1679738,1423526,1674591,1863932,1698487,1424451,1653680,1426077,1592300,1427091,1866306,1678469,1687889,1885628,1754871,1697734,1427745,1676392,1435703,1683862,1685934,1440113,1697889,1645313,1695415,1697978,1440115,1697761,1443831,1738674,1675969,1783601,1451634,1667240,1837708,1452560,1685055,1491045,1673035,1510856,1692018,1727461,1544352,1697733,1549952,1695545,1632497,1564047,1565752,1566439,1638648,1567235,1883217,1567300,1714177,1570983,1571142,1692241,1762974,1687533,1574853,1636012,1575138,1580850,1584974,1231868,1730214,1703921,1668071,1586863,1622771,1587597,1715794,1589451,1590453,1590969,1724336,1591599,1595150,1656630,1595320,1687592,1596378,1692957,1599560,1630345,1599564,1684503,1795790,1599578,1600335,1693496,1601255,1668087,1623379,1601322,1602844,1603029,1603200,1604456,1437822,1605064,1626190,1658265,1605066,1675043,1724293,1605105,1605107,1845600,1606950,1684926,1607175,1608476,1609282,1674403,1618815,1619060,1620396,1620867,1692081,1659233,1621031,1695395,1621206,1697936,1622740,1623040,1623188,1623203,1676936,1823445,1625350,1626450,1659234,1626592,1626977,1667045,1682500,Unknownnknown,1768237,1768651,1771685,1772542,1772760,1774801,1776110,1777485,1864228,1307967,1780848,1782205,1848246,1782241,1858911,1782309,1594493,1784948,1785944,1412269,1792411,1803747,1842251,1804119,1808359,1811744,1814403,1815699,1830010,1098124,1830114,1834596,1834995,1839379,1853214,1855756,1855986,1857739,1859722,1859917,1861111,1862646,1865876,1862829,1345211,1372541,1899284,1863959,1864227,1864229,1864230,1865797,1867570,1867606,1867641,1868526,1870988,1874259,1874663,1876773,1877734,1878357,1882298,1883028,1883918,1220453,1886248,1888959,1892641,1893342,1893377,1897514,1659335,1898428,1899632';
        String[] splitAccounts = strAccountnum.split(',');
        for(String acNum :splitAccounts){
            Definedlist.add(acNum);
        }
        System.debug('Definedlist---'+Definedlist.size());
        //Definedlist.add('1419440');
        Integer shiptoCounter = 0;
        Integer billtoCounter = 0;
        Set<Id> successAcUpdateIds = new Set<Id>();
        List<Account> lstaccToupdate = new List<Account>();
        Set<Id> sertupdate = new Set<Id>();
        Map<string,Integer> mapAddressNOTFound = new Map<string,Integer>();
        Map<String,Account> mapAccupdate = new Map<String,Account>();
        Map<string,List<Address__c>> mapAddress = new Map<string,List<Address__c>>();
        List<Account> lstAccounts = [SELECT Id,AccountNumber, (SELECT Id, Account__c, Address_Line_1__c, 
                                    Address_Line_2__c, Address_Line_3__c,
                                    City__c, Country__c,State__c,Postal_code__c, Type__c, Primary_Flag__c 
                                    FROM Addresses__r where Primary_Flag__c =true)
                                     FROM Account
                                     where AccountNumber IN: Definedlist offset 10];
        System.debug('AccountSize--'+lstAccounts.size());
        
        if(lstAccounts.size()>0){
            for(Account accupdate : lstAccounts){
                
                shiptoCounter = 0;
                billtoCounter = 0;
                If(accupdate.Addresses__r.size() == 0){
                    //System.debug('No address found for Account '+accupdate.Id);
                    mapAddressNOTFound.put(accupdate.id,0);
                }
                for(Address__c adrt : accupdate.Addresses__r){
                    if(adrt.type__c == 'Ship To'){                        
                        shiptoCounter++;
                        if(shiptoCounter <=1){
                            accupdate.ShippingCountry =  adrt.Country__c;
                            accupdate.ShippingStreet = adrt.Address_Line_1__c;                       
                            accupdate.ShippingCity = adrt.City__c;
                            accupdate.ShippingState = adrt.State__c;
                            accupdate.ShippingPostalCode  = adrt.Postal_code__c;
                        }else{
                            System.debug('**Warning--Multiple Primary Ship to addresses found of Account-- '+accupdate.Id);
                        }
                    }else if(adrt.type__c == 'Bill To'){
                        billtoCounter++;
                        if(billtoCounter <= 1 ){
                            accupdate.BillingCountry =  adrt.Country__c;
                            accupdate.BillingStreet = adrt.Address_Line_1__c;                       
                            accupdate.BillingCity = adrt.City__c;
                            accupdate.BillingState = adrt.State__c;
                            accupdate.BillingPostalCode  = adrt.Postal_code__c; 
                        }else{
                            System.debug('**Warning--Multiple Primary Bill to addresses found of Account-- '+accupdate.Id);
                        }
                    }
                    if(mapAccupdate.containskey(accupdate.Id)){
                        account acct = mapAccupdate.get(accupdate.Id);
                        mapAccupdate.put(accupdate.Id,acct);
                        
                    }else{
                        mapAccupdate.put(accupdate.Id,accupdate);
                    }
                   lstaccToupdate.add(accupdate);
                sertupdate.add(accupdate.Id);
                }
                
            }    
        }
        System.debug('Account That dont have address are-->'+mapAddressNOTFound.size());
        System.debug('Account have addess-->'+lstaccToupdate.size());
        System.debug('Account have addess sertupdate-->'+sertupdate.size());
       
       Database.saveResult[] rslt=Database.update(lstaccToupdate, false);
        for(Database.saveResult r: rslt){
            if(r.isSuccess()){
                //System.debug('SuccessIds--'+r.getId());
                successAcUpdateIds.add(r.getId());
            }
            else{
                  for(Database.Error err : r.getErrors()){
                    System.debug('The following error has occurred.');                    
                    System.debug('--Status_Code--'+err.getStatusCode() + ': ' + err.getMessage());
                    System.debug('--Account fields that affected this error: ' + err.getFields());
                }
            }
        }
       //update lstAccounts;
       System.debug('--Account Address update Completed--'+successAcUpdateIds.size());
    }
}